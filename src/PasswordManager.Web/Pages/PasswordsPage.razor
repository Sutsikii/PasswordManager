@page "/passwords"
@using PasswordManager.Core.Generator


@inject Toaster Toaster
@inject NavigationManager Router
@inject IPasswordManagerClient Client
@inject IJSRuntime JS

<h3>PasswordsPage</h3>

<QuickGrid Items="Passwords.AsQueryable()" Pagination="Pagination" >
    <PropertyColumn Title="Service" Property="i => i.Service" />
    <PropertyColumn Title="Identifiant" Property="i => i.Login" />
    <PropertyColumn Title="Description" Property="i => i.Description" />
    <TemplateColumn Title="Mot de passe">
        <button class="btn btn-success" @onclick="() => Copy(context)"><i class="bi bi-clipboard"></i></button>
        <button class="btn btn-primary">
            <span title="@context.Password">
                <i class="bi bi-eye"></i>
            </span>
        </button>
    </TemplateColumn>
    <TemplateColumn>
        <button class="btn btn-danger" @onclick="() => DeletePassword(context)"><i class="bi bi-x-lg"></i></button>
    </TemplateColumn>
</QuickGrid>
<Paginator State="Pagination" />

<EditForm Model="Model" OnValidSubmit="Submit" FormName="@typeof(PasswordsPage).FullName">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mt-2">
        <label for="service">Service</label>
        <InputText class="form-control" id="service" @bind-Value="Model.Service" />
        <ValidationMessage For="() => Model.Service" />
    </div>

    <div class="mt-2">
        <label for="login">Identifiant</label>
        <InputText class="form-control" id="login" @bind-Value="Model.Identifiant"/>
        <ValidationMessage For="() => Model.Identifiant" />
    </div>

    <div class="mt-2">
        <label for="password">Password</label>
        <InputText class="form-control" id="password" @bind-Value="Model.Password" />
        <ValidationMessage For="() => Model.Password" />
    </div>

    <div class="mt-2">
        <label for="description">Description</label>
        <InputTextArea class="form-control" id="description" @bind-Value="Model.Description"/>
        <ValidationMessage For="() => Model.Description" />
    </div>

    <div class="d-flex mt-2">
        <button type="submit" class="btn btn-success">Ajouter le mot de passe</button>
    </div>

    <hr class="mt-2"/>

    <div class="d-flex align-items-center justify-content-evenly">
        <div class="me-2 form-check">
            <InputCheckbox class="form-check-input" id="capitals" @bind-Value="PasswordGenerator.Configuration.UseCapital"/>
            <label class="form-check-label" for="capitals">Use Capitals</label>
        </div>

        <div class="me-2 form-check">
            <InputCheckbox class="form-check-input" id="numbers" @bind-Value="PasswordGenerator.Configuration.UseNumbers" />
            <label class="form-check-label" for="numbers">Use Numbers</label>
        </div>

        <div class="me-2 form-check">
            <InputCheckbox class="form-check-input" id="symbols" @bind-Value="PasswordGenerator.Configuration.UseSymbols" />
            <label class="form-check-label" for="symbols">Use Symbols</label>
        </div>

        <div class="me-2 d-flex align-items-center">
            <InputNumber class="form-control" id="length" @bind-Value="PasswordGenerator.Configuration.Length" />
            <label class="form-check-label ms-1" for="length">Length</label>
        </div>

        <button class="btn btn-success" type="button" @onclick="GeneratePassword">Générer un mot de passe</button>
    </div>
</EditForm>

@code {
    private PasswordDTO[] Passwords = [];
    private readonly PasswordGenerator PasswordGenerator = new (); 

    private CreatePasswordPayload Model = new();
    public PaginationState Pagination = new()
    {
        ItemsPerPage = 10
    };

    protected override async Task OnInitializedAsync()
    {
        OneOf<PasswordDTO[], ErrorCode> p = await Client.GetPasswords();

        if (p.Is<ErrorCode>())
        {
            Toaster.Error(p.T_1!);
            Router.NavigateTo("/");
            return;
        }

        Passwords = p.T_0!;
        StateHasChanged();
    }

    private async Task Submit(EditContext obj)
    {
        GenericResult r = await Client.AddPassword(Model);

        r.Match(async s =>
        {
            Toaster.Success(s);
            Model = new();
            await OnInitializedAsync();
        }, e =>
        {
            Toaster.Error(e);
            return (Task.CompletedTask);
        });
    }

    private void GeneratePassword()
    {
        PasswordGenerator
            .Generate()
            .Match(
                str => Model.Password = str,
                _ => Toaster.Error("La configuration du générateur n'est pas bonne")
            );
    }

    private async Task DeletePassword(PasswordDTO context)
    {
        GenericResult r = await Client.DeletePassword(context.Id);

        r.Match(async s =>
        {
            Toaster.Success("Mot de passe supprimé");
            await OnInitializedAsync();
        }, e =>
        {
            Toaster.Error(e);
            return (Task.CompletedTask);
        });
    }

    private async Task Copy(PasswordDTO p)
    {
        await JS.InvokeVoidAsync("CopyToClipboard", p.Password);
        Toaster.Success("Mot de passe copié !");
    }

}
